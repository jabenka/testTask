openapi: 3.0.1
info:
  description: API Documentation for Bank Cards
  title: Bank Cards API
  version: "1.0"
servers:
- description: Generated server url
  url: http://localhost:8081
security:
- bearerAuth: []
tags:
- description: Operations related to users
  name: User Controller
paths:
  /user/cards/transfer:
    post:
      operationId: transfer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                type: object
          description: OK
      tags:
      - User Controller
      x-content-type: application/json
      x-accepts:
      - '*/*'
  /user/cards/block:
    post:
      operationId: blockCard
      parameters:
      - explode: true
        in: query
        name: last_four_card_digits
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                type: object
          description: OK
      tags:
      - User Controller
      x-accepts:
      - '*/*'
  /auth/refresh:
    post:
      operationId: refresh
      parameters:
      - explode: true
        in: query
        name: refreshToken
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                type: object
          description: OK
      tags:
      - auth-controller
      x-accepts:
      - '*/*'
  /auth/login:
    post:
      description: Authenticates user credentials and returns JWT token
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginResponse'
          description: Authentication successful
        "400":
          content:
            '*/*':
              schema:
                type: object
          description: Invalid request format or missing fields
        "401":
          content:
            '*/*':
              schema:
                type: object
          description: Invalid credentials
        "500":
          content:
            '*/*':
              schema:
                type: object
          description: Internal server error
      summary: Authenticate user
      tags:
      - auth-controller
      x-content-type: application/json
      x-accepts:
      - '*/*'
  /admin/users/add:
    post:
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                type: object
          description: OK
      tags:
      - admin-controller
      x-content-type: application/json
      x-accepts:
      - '*/*'
  /admin/cards/create:
    post:
      operationId: createCard
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardCreationRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                type: object
          description: OK
      tags:
      - admin-controller
      x-content-type: application/json
      x-accepts:
      - '*/*'
  /admin/cards/update:
    patch:
      operationId: updateCard
      parameters:
      - explode: true
        in: query
        name: last_four_card_digits
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: activate
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                type: object
          description: OK
      tags:
      - admin-controller
      x-accepts:
      - '*/*'
  /admin/cards/block/resolve:
    patch:
      operationId: resolveCard
      parameters:
      - explode: true
        in: query
        name: request_id
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                type: object
          description: OK
      tags:
      - admin-controller
      x-accepts:
      - '*/*'
  /user/cards/get:
    get:
      description: Returns list of user's cards
      operationId: getCards
      parameters:
      - explode: true
        in: query
        name: pageable
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
        style: form
      - explode: true
        in: query
        name: search_query
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                type: object
          description: OK
      security:
      - bearerAuth: []
      summary: Get user cards
      tags:
      - User Controller
      x-accepts:
      - '*/*'
  /user/cards/balance:
    get:
      operationId: getBalance
      parameters:
      - explode: true
        in: query
        name: request
        required: true
        schema:
          $ref: '#/components/schemas/BalanceRequest'
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                type: object
          description: OK
      tags:
      - User Controller
      x-accepts:
      - '*/*'
  /admin/users/:
    get:
      operationId: getAllUsers
      responses:
        "200":
          content:
            '*/*':
              schema:
                type: object
          description: OK
      tags:
      - admin-controller
      x-accepts:
      - '*/*'
  /admin/cards/block/requests:
    get:
      operationId: getAllCardsBlockRequests
      parameters:
      - explode: true
        in: query
        name: pageable
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                type: object
          description: OK
      tags:
      - admin-controller
      x-accepts:
      - '*/*'
  /admin/cards/:
    get:
      operationId: getAllCards
      responses:
        "200":
          content:
            '*/*':
              schema:
                type: object
          description: OK
      tags:
      - admin-controller
      x-accepts:
      - '*/*'
  /admin/users/delete:
    delete:
      operationId: deleteUser
      parameters:
      - explode: true
        in: query
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                type: object
          description: OK
      tags:
      - admin-controller
      x-accepts:
      - '*/*'
  /admin/cards/delete:
    delete:
      operationId: deleteCard
      parameters:
      - explode: true
        in: query
        name: last_four_card_digits
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                type: object
          description: OK
      tags:
      - admin-controller
      x-accepts:
      - '*/*'
components:
  schemas:
    TransferRequest:
      example:
        amount: 0.8008281904610115
        source: source
        target: target
      properties:
        source:
          type: string
        target:
          type: string
        amount:
          type: number
      type: object
    LoginResponse:
      example:
        refresh_token: refresh_token
        expires_in: 0
        token: token
      properties:
        token:
          type: string
        refresh_token:
          type: string
        expires_in:
          format: int64
          type: integer
      type: object
    LoginRequest:
      example:
        password: password
        username: username
      properties:
        username:
          maxLength: 100
          minLength: 3
          type: string
        password:
          maxLength: 100
          minLength: 3
          type: string
      required:
      - password
      - username
      type: object
    RegisterRequest:
      example:
        password: password
        role: ADMIN
        username: username
      properties:
        username:
          maxLength: 100
          minLength: 3
          type: string
        password:
          maxLength: 100
          minLength: 3
          type: string
        role:
          enum:
          - ADMIN
          - USER
          type: string
      required:
      - password
      - role
      - username
      type: object
    CardCreationRequest:
      example:
        card_number: card_number
        owner_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        expires_in: 2000-01-23
        start_balance: 0.8008281904610115
        status: EXPIRED
      properties:
        card_number:
          maxLength: 16
          minLength: 16
          type: string
        owner_id:
          format: uuid
          type: string
        expires_in:
          format: date
          type: string
        status:
          enum:
          - EXPIRED
          - ACTIVE
          - BLOCKED
          type: string
        start_balance:
          type: number
      required:
      - card_number
      - expires_in
      - owner_id
      - status
      type: object
    Pageable:
      properties:
        page:
          format: int32
          minimum: 0
          type: integer
        size:
          format: int32
          minimum: 1
          type: integer
        sort:
          items:
            type: string
          type: array
      type: object
    BalanceRequest:
      properties:
        last_four_card_digits:
          items:
            type: string
          type: array
      required:
      - last_four_card_digits
      type: object
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http

